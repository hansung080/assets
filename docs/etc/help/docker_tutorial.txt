###### docker tutorial ######

### docker engine install ###
## requirements
1. Kernel version need to be equal or higher than 3.10.
2. Linux distribution need to be supportable.
3. Linux need to be 64-bit.
4. Installation requires root permission.

$ uname -a
Linux ubuntu64 4.15.0-48-generic #51-Ubuntu SMP Wed Apr 3 08:28:49 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

$ uname -r
4.15.0-48-generic

$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
$ sudo apt-get update
$ sudo apt-get install docker-ce

$ docker -v
Docker version 18.09.5, build e8ff056

$ sudo docker info

### docker engine commands ###
## create container
$ sudo docker run -it ubuntu:14.04
# exit OR Ctrl + D # exit with stopping container.
# Ctrl + P + Q # exit without stopping container.
$ sudo docker pull centos:7
$ sudo docker create -it --name mycentos centos:7
$ sudo docker start mycentos
$ sudo docker attach mycentos
$ sudo docker images

## difference between run and create
## - run: pull + create + start + attach # pull if the image does not exist and attach if -it options are used.
## - create: pull + create # pull if the image does not exist.

## list container
$ sudo docker ps
$ sudo docker ps -a
$ sudo docker inspect mycentos | grep Id
$ sudo docker container inspect mycentos | grep Id
$ sudo docker run -it ubuntu:14.04 echo hello world! # override the image-embedded command with the CLI command.
$ sudo docker rename angry_morse my_container
$ sudo docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Names}}"

## remove container
$ sudo docker stop mycentos
$ sudo docker rm mycentos
$ sudo docker rm -f mycentos
$ sudo docker container prune # This will remove all stopped containers.
$ sudo docker stop `sudo docker ps -aq`
$ sudo docker rm $(sudo docker ps -a -q)

## expose container
$ sudo docker run -it --name mywebserver -p 80:80 ubuntu:14.04 
# apt-get update
# apt-get install apache2 -y
# service apache2 start
$ sudo docker run -it -p 3306:3306 -p 192.168.0.15:7777:80 ubuntu:14.04

## construct container application
$ sudo docker run -it --name ubuntu_attach_test ubuntu:14.04
# Ctrl + P + Q # exit without stopping container.
$ sudo docker attach ubuntu_attach_test

$ sudo docker run -d --name wordpressdb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress mysql:5.7
$ sudo docker exec -it wordpressdb /bin/bash
# echo $MYSQL_ROOT_PASSWORD
# mysql -u root -p
# exit # exit without stopping container if docker exec has been used. only exit /bin/bash.
$ sudo docker exec wordpressdb ls /

$ sudo docker run -d --name wordpress -e WORDPRESS_DB_PASSWORD=password --link wordpressdb:mysql -p 80 wordpress
$ sudo docker port wordpress
$ sudo docker exec wordpress ping -c 2 mysql

## docker volume
## - host volume sharing
$ sudo docker run -d --name wordpressdb_hostvolume -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -v /home/hansung/work/docker/volumes/wordpress_db:/var/lib/mysql mysql:5.7
$ sudo docker run -d --name wordpress_hostvolume -e WORDPRESS_DB_PASSWORD=password --link wordpressdb_hostvolume:mysql -p 80 wordpress
$ ls -alF /home/hansung/work/docker/volumes/wordpress_db
$ sudo docker stop wordpress_hostvolume wordpressdb_hostvolume
$ sudo docker rm wordpress_hostvolume wordpressdb_hostvolume
$ ls -alF /home/hansung/work/docker/volumes/wordpress_db

$ sudo docker run -it --name volume_dummy alicek106/volume_test
# ls -alF /home/testdir_2
$ sudo docker run -it --name volume_override -v /home/hansung/work/docker/volumes/wordpress_db:/home/testdir_2 alicek106/volume_test
# ls -alF /home/testdir_2

## - volume container
$ sudo docker run -it --name volumes_from_container --volumes-from volume_override ubuntu:14.04
# ls -alF /home/testdir_2

## - docker volume
$ sudo docker volume create --name myvolume
$ sudo docker volume ls
$ sudo docker run -it --name myvolume_1 -v myvolume:/root ubuntu:14.04
# echo hello, volume! >> /root/volume
$ sudo docker run -it --name myvolume_2 -v myvolume:/root ubuntu:14.04
# cat /root/volume
hello, volume!
$ sudo docker inspect myvolume
$ sudo docker inspect --type volume myvolume
$ sudo docker volume inspect myvolume
$ sudo cat /var/lib/docker/volumes/myvolume/_data/volume
hello, volume!
$ sudo docker run -it --name volume_auto -v /root ubuntu:14.04
$ sudo docker volume ls
$ sudo docker container inspect volume_auto | grep Source
$ sudo docker volume prune

## docker network
$ sudo apt-get install bridge-utils
$ brctl show docker0
$ sudo docker network ls
$ sudo docker network inspect bridge

## - bridge network
$ sudo docker network create --driver bridge mybridge
$ sudo docker run -it --name mynetwork_container --net mybridge ubuntu:14.04
$ sudo docker network create --driver bridge --subnet 172.72.0.0/16 --ip-range 172.72.0.0/24 --gateway 172.72.0.1 my_custom_network

## - host network
$ sudo docker run -it --name network_host --net host ubuntu:14.04

## - none network
$ sudo docker run -it --name network_none --net none ubuntu:14.04

## - container network
$ sudo docker run -itd --name network_container_1 ubuntu:14.04
$ sudo docker run -itd --name network_container_2 --net container:network_container_1 ubuntu:14.04
$ sudo docker exec network_container_1 ifconfig
$ sudo docker exec network_container_2 ifconfig

## - bridge network and --net-alias
$ sudo docker run -itd --name network_alias_container1 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker run -itd --name network_alias_container2 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker run -itd --name network_alias_container3 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker inspect network_alias_container1 | grep IPAddress
$ sudo docker inspect network_alias_container2 | grep IPAddress
$ sudo docker inspect network_alias_container3 | grep IPAddress
$ sudo docker run -it --name network_alias_ping --net mybridge ubuntu:14.04
# ping -c 1 alicek106
# ping -c 1 alicek106
# ping -c 1 alicek106
# apt-get update
# apt-get install dnsutils
# dig alicek106

## container logging
## - json-file logging
$ sudo docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=1234 mysql:5.7
$ sudo docker logs mysql
$ sudo docker run -d --name no_passwd_mysql mysql:5.7
$ sudo docker ps -a --format "table {{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"
$ sudo docker logs no_passwd_mysql
$ sudo docker logs --tail 2 mysql
$ sudo docker logs --since 1474765979 mysql
$ sudo docker logs -f -t mysql
$ sudo docker run -it --name logstest ubuntu:14.04
# echo test!
$ sudo docker logs logstest
$ sudo cat /var/lib/docker/containers/${CONTAINER_ID}/${CONTAINER_ID}-json.log

## - syslog logging
$ sudo docker run -d --name syslog_container --log-driver syslog ubuntu:14.04 echo syslogtest
$ tail /var/log/syslog # for ubuntu 14.04
$ journalctl -u docker.service # for ubuntu 16.04

$ sudo docker run -it --name rsyslog_server -h rsyslog -p 514:514 -p 514:514/udp ubuntu:14.04
# vi /etc/rsyslog.conf
----------------------------------------------------------------------------------------------------
# provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

# provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514
----------------------------------------------------------------------------------------------------
# service rsyslog restart
$ sudo docker run -it --name rsyslog_client --log-driver syslog --log-opt syslog-address=tcp://192.168.0.15:514 --log-opt tag="mylog" ubuntu:14.04
# echo test
$ sudo docker attach rsyslog_server
# tail /var/log/syslog

$ sudo docker run -it --name rsyslog_client_facility --log-driver syslog --log-opt syslog-address=tcp://192.168.0.15:514 --log-opt tag="maillog" --log-opt syslog-facility="mail" ubuntu:14.04
# echo facility test
$ sudo docker attach rsyslog_server
# tail /var/log/mail.log

## - fluentd logging
$ sudo docker run -d --name mongoDB -p 27017:27017 mongo
$ vi /home/hansung/work/docker/logging/fluentd/fluent.conf
----------------------------------------------------------------------------------------------------
<source>
  @type forward
</source>
<match docker.**>
  @type mongo
  database nginx
  collection access
  host 192.168.0.15
  port 27017
  flush_interval 10s
</match>
----------------------------------------------------------------------------------------------------
$ sudo docker run -d --name fluentd -p 24224:24224 -v /home/hansung/work/docker/logging/fluentd/fluent.conf:/fluentd/etc/fluent.conf -e FLUENTD_CONF=fluent.conf alicek106/fluentd:mongo
$ sudo docker run -d --name nginx_logging -p 80:80 --log-driver fluentd --log-opt fluentd-address=192.168.0.15:24224 --log-opt tag=docker.nginx.webserver nginx
$ sudo docker exec -it mongoDB mongo
> show dbs
> use nginx
> show collections
> db['access'].find()

## - aws cloudwatch logging
$ sudo docker run -it --name aws_cloudwatch_logging --log-driver awslogs --log-opt awslogs-region=ap-northeast-2 --log-opt awslogs-group=mylogs --log-opt awslogs-stream=mylogstream ubuntu:14.04
# echo test!

## container resource restriction
## - container memory restriction
$ sudo docker run -d --name memory_1g --memory 1g nginx
$ sudo docker inspect memory_1g | grep \"Memory\"
$ sudo docker run -d --name swap_500m --memory 200m --memory-swap 500m ubuntu:14.04
$ sudo docker inspect swap_500m | grep Memory

## - container cpu restriction
$ sudo docker run -it --name cpu_share --cpu-shares 2048 ubuntu:14.04 # 1024: 1 ratio, 2048: 2 ratio
$ sudo docker run -d --name cpu_1024 --cpu-shares 1024 alicek106/stress stress --cpu 1
$ sudo docker run -d --name cpu_512 --cpu-shares 512 alicek106/stress stress --cpu 1
$ ps aux | head -1; ps aux | grep stress

$ sudo docker run -d --name cpuset_2 --cpuset-cpus 0 alicek106/stress stress --cpu 1 # 1-th cpu
$ htop
$ sudo docker run -d --name cpuset_0_3 --cpuset-cpus "0,3" alicek106/stress stress --cpu 1 # 1-th, 4-th cpu
$ htop
$ sudo docker run -d --name cpuset_0_2 --cpuset-cpus "0-2" alicek106/stress stress --cpu 1 # 1-th ~ 3-th cpu
$ htop

$ sudo docker run -d --name quota_1_4 --cpu-period 100000 --cpu-quota 25000 alicek106/stress stress --cpu 1 # 25000ms/100000ms=1/4
$ sudo docker run -d --name quota_1_1 --cpu-period 100000 --cpu-quota 100000 alicek106/stress stress --cpu 1 # 100000ms/100000ms=1/1
$ ps aux | head -1; ps aux | grep stress

$ sudo docker run -d --name cpu_half_1 --cpus 0.5 alicek106/stress stress --cpu 1 # 0.5 cpus
$ sudo docker run -d --name cpu_half_2 --cpu-shares 512 alicek106/stress stress --cpu 1
$ sudo docker run -d --name cpu_half_3 --cpu-period 100000 --cpu-quota 50000 alicek106/stress stress --cpu 1
$ ps aux | head -1; ps aux | grep stress

## - container block I/O restriction
$ sudo docker run -it --name write_bps_1mb --device-write-bps /dev/sda1:1mb ubuntu:14.04 # 1 Mbps
# dd if=/dev/zero of=test.out bs=1M count=10 oflag=direct
$ sudo docker run -it --name write_iops_5 --device-write-iops /dev/sda1:5 ubuntu:14.04 # 5 ratio
# dd if=/dev/zero of=test.out bs=1M count=10 oflag=direct
$ sudo docker run -it --name write_iops_10 --device-write-iops /dev/sda1:10 ubuntu:14.04 # 10 ratio
# dd if=/dev/zero of=test.out bs=1M count=10 oflag=direct

## - container storage restriction
$ sudo docker run -it --name centos centos:7
# df -h
$ sudo docker run -it --name ubuntu ubuntu:14.04
# df -h
$ sudo docker info | grep "Storage Driver"
DOCKER_OPTS="... --storage-driver divicemapper --storage-opt dm.basesize=20G ..."
$ sudo service docker stop
$ sudo rm -rf /var/lib/docker
$ sudo service docker start
$ sudo docker run -it --name centos2 centos:7
# df -h

## docker image
## - create docker image
$ sudo docker search ubuntu

$ sudo docker run -it --name commit_test ubuntu:14.04
# echo test_first! >> first
$ sudo docker commit -a "alicek106" -m "my first commit" commit_test commit_test:first
$ sudo docker images
$ sudo docker run -it --name commit_test2 commit_test:first
# echo test_second! >> second
$ sudo docker commit -a "alicek106" -m "my second commit" commit_test2 commit_test:second
$ sudo docker images

## - comprehend image structure and remove docker image
$ sudo docker inspect ubuntu:14.04 | grep -A5 Layers
$ sudo docker inspect commit_test:first | grep -A6 Layers
$ sudo docker inspect commit_test:second | grep -A7 Layers

$ sudo docker stop commit_test2 && sudo docker rm commit_test2
$ sudo docker rmi commit_test:first
$ sudo docker images -f dangling=true
$ sudo docker image prune # remove all dangling images which is not being used.
$ sudo docker rmi -f commit_test:first # only remove image tag.
$ sudo docker rmi commit_test:second

## - extract image
$ sudo docker save -o ubuntu_14_04.tar ubuntu:14.04
$ sudo docker load -i ubuntu_14_04.tar

$ sudo docker run -it --name mycontainer ubuntu:14.04
$ sudo docker export -o rootFS.tar mycontainer
$ sudo docker import rootFS.tar myimage:0.0

## docker hub
## - docker hub site
https://hub.docker.com/
  - ID: hansung080
  - PW: *********
  - E-mail: hansung080@hanmail.net

## - push image to docker hub
$ sudo docker run -it --name commit_container1 ubuntu:14.04
# echo my first push >> test
$ sudo docker commit commit_container1 myimagename:0.0
$ sudo docker tag myimagename:0.0 hansung080/myimagename:0.0
$ sudo docker login
$ sudo cat ~/.docker/config.json
$ sudo docker push hansung080/myimagename:0.0

## docker private registry
## - create private registry container
$ sudo docker run -d --name myregistry -p 5000:5000 --restart always registry:2.6 # restart: always / on-failure:5 / unless-stopped
$ curl localhost:5000/v2/

## - push image to private registry
$ sudo docker tag myimagename:0.0 192.168.0.15:5000/myimagename:0.0
DOCKER_OPTS="--insecure-registry 192.168.0.15:5000"
$ sudo docker push 192.168.0.15:5000/myimagename:0.0 # http requires --insecure-registry option.
$ sudo docker pull 192.168.0.15:5000/myimagename:0.0 # http requires --insecure-registry option.

$ sudo docker tag myimagename:0.0 localhost:5000/myimagename:0.0
$ sudo docker push localhost:5000/myimagename:0.0 # http with localhost does not require --insecure-registry option.
$ sudo docker pull localhost:5000/myimagename:0.0 # http with localhost does not require --insecure-registry option.

## - remove private registry container
$ sudo docker stop myregistry
$ sudo docker rm --volumes myregistry

## - create authentication with nginx
$ mkdir certs
$ openssl genrsa -out ./certs/ca.key 2048
$ openssl req -x509 -new -key ./certs/ca.key -days 10000 -out ./certs/ca.crt
$ openssl genrsa -out ./certs/domain.key 2048
$ openssl req -new -key ./certs/domain.key -subj /CN=192.168.0.15 -out ./certs/domain.csr
$ echo subjectAltName = IP:192.168.0.15 > extfile.cnf
$ openssl x509 -req -in ./certs/domain.csr -CA ./certs/ca.crt -CAkey ./certs/ca.key -CAcreateserial -out ./certs/domain.crt -days 10000 -extfile extfile.cnf

$ sudo apt-get install apache2-utils
$ htpasswd -c htpasswd hansung080
New password: test1234
Re-type new password: test1234
Adding password for user hansung080
$ mv htpasswd ./certs/

$ vi ./certs/nginx.conf
----------------------------------------------------------------------------------------------------
upstream docker-registry {
  server registry:5000;
}

server {
  listen 443;
  server_name 192.168.0.15;
  ssl on;
  ssl_certificate /etc/nginx/conf.d/domain.crt;
  ssl_certificate_key /etc/nginx/conf.d/domain.key;
  client_max_body_size 0;
  chunked_transfer_encoding on;

  location /v2/ {
    if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
      return 404;
    }

    auth_basic "registry.localhost";
    auth_basic_user_file /etc/nginx/conf.d/htpasswd;
    add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;

    proxy_pass                          http://docker-registry;
    proxy_set_header  Host              $http_host;
    proxy_set_header  X-Real-IP         $remote_addr;
    proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto $scheme;
    proxy_read_timeout                  900;
  }
}
----------------------------------------------------------------------------------------------------

$ sudo docker stop myregistry; sudo docker rm myregistry
$ sudo docker run -d --name myregistry --restart always registry:2.6
$ sudo docker run -d --name nginx_frontend -p 443:443 -v $(pwd)/certs/:/etc/nginx/conf.d --link myregistry:registry nginx:1.9
$ sudo docker ps -a --format "table {{.ID}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"

$ sudo cp ./certs/ca.crt /usr/local/share/ca-certificates
$ sudo update-ca-certificates
$ sudo service docker restart
$ sudo docker start nginx_frontend
$ sudo docker login https://192.168.0.15 # 443: omittable

$ sudo docker tag myimagename:0.0 192.168.0.15/myimagename:0.0 # 443: omittable
$ sudo docker push 192.168.0.15/myimagename:0.0
$ sudo docker pull 192.168.0.15/myimagename:0.0

## - private registry restful api
$ curl -u hansung080:test1234 https://192.168.0.15/v2/_catalog # 443: omittable
{"repositories":["myimagename"]}

$ curl -u hansung080:test1234 https://192.168.0.15/v2/myimagename/tags/list
{"name":"myimagename","tags":["0.0"]}

$ curl -u hansung080:test1234 -i --header "Accept: application/vnd.docker.distribution.manifest.v2+json" https://192.168.0.15/v2/myimagename/manifests/0.0
HTTP/1.1 200 OK
Server: nginx/1.9.15
Date: Mon, 06 May 2019 08:59:02 GMT
Content-Type: application/vnd.docker.distribution.manifest.v2+json
Content-Length: 1359
Connection: keep-alive
Docker-Content-Digest: sha256:ab3c62f57894c0509ac60c1bc473c309683821bc4b8d001fd6e5632b042e2250
Docker-Distribution-Api-Version: registry/2.0
Etag: "sha256:ab3c62f57894c0509ac60c1bc473c309683821bc4b8d001fd6e5632b042e2250"
X-Content-Type-Options: nosniff
Docker-Distribution-Api-Version: registry/2.0

{
   "schemaVersion": 2,
   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
   "config": {
      "mediaType": "application/vnd.docker.container.image.v1+json",
      "size": 3388,
      "digest": "sha256:21ee2ff6ae162378e27c4bef1937fad210581f2f6b3f017cf08ef7c35ee801d0"
   },
   "layers": [
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 67191621,
         "digest": "sha256:d6fdcbe24ed5fa182ac7e2079daca382068952e5b9e1f78e47a1492feae37379"
      },
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 72646,
         "digest": "sha256:1115217119d4439b38f4fc557ba298d0de6c9e1ecce52b93ad2d25d3523758a1"
      },
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 364,
         "digest": "sha256:8180a23d2c44e5284574f3cf04081a3d5825a61174d41f3d4801e8f00464d5b9"
      },
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 164,
         "digest": "sha256:ceab6b3c2a5e76a26134953a6f8ef95dba277ad43b38cd03c00380660df24b8f"
      },
      {
         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
         "size": 197,
         "digest": "sha256:be21a105939ebdcb78ec0c7d905558555db9d7281a4099065ddaea49e51c3368"
      }
   ]
}

$ curl -u hansung080:test1234 -i -X DELETE -H "Accept: application/vnd.docker.distribution.manifest.v2+json" https://192.168.0.15/v2/myimagename/manifests/sha256:ab3c62f57894c0509ac60c1bc473c309683821bc4b8d001fd6e5632b042e2250 # {Docker-Content-Digest} 
HTTP/1.1 405 Method Not Allowed
...

{"errors":[{"code":"UNSUPPORTED","message":"The operation is unsupported."}]}

$ sudo docker stop myregistry; sudo docker rm myregistry
$ sudo docker run -d --name myregistry --restart always -e REGISTRY_STORAGE_DELETE_ENABLED=true registry:2.6
$ sudo docker push 192.168.0.15/myimagename:0.0

$ curl -u hansung080:test1234 -i -X DELETE -H "Accept: application/vnd.docker.distribution.manifest.v2+json" https://192.168.0.15/v2/myimagename/manifests/sha256:ab3c62f57894c0509ac60c1bc473c309683821bc4b8d001fd6e5632b042e2250 # {Docker-Content-Digest}
HTTP/1.1 202 Accepted
...

$ curl -u hansung080:test1234 -i -X DELETE https://192.168.0.15/v2/myimagename/blobs/sha256:be21a105939ebdcb78ec0c7d905558555db9d7281a4099065ddaea49e51c3368 # {layers.digest}
HTTP/1.1 202 Accepted
...

## - set private registry options
$ sudo docker run -d --name registry_delete_enabled -p 5001:5000 --restart always -e REGISTRY_STORAGE_DELETE_ENABLED=true -e REGISTRY_STORATE_FILESYSTEM_ROOTDIRECTORY=/var/lib/mydocker registry:2.6
$ sudo docker exec registry_delete_enabled cat /etc/docker/registry/config.yml

$ vi config.yml
----------------------------------------------------------------------------------------------------
version: 0.1
log:
  level: info
storage:
  filesystem:
    rootdirectory: /registry_data
    delete:
      enabled: true
http:
  addr: 0.0.0.0:5000
----------------------------------------------------------------------------------------------------
$ sudo docker run -d --name yml_registry -p 5002:5000 --restart always -v $(pwd)/config.yml:/etc/docker/registry/config.yml registry:2.6
$ sudo docker tag ubuntu:14.04 localhost:5002/ubuntu:14.04
$ sudo docker push localhost:5002/ubuntu:14.04
$ sudo docker exec yml_registry ls /registry_data

## dockerfile
## - create dockerfile
$ mkdir -p dockerfiles && cd dockerfiles
$ echo test >> test.html
$ vi Dockerfile_apache
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
MAINTAINER hansung080
LABEL "purpose"="practice"
RUN apt-get update
RUN apt-get install apache2 -y
ADD test.html /var/www/html
WORKDIR /var/www/html
RUN ["/bin/bash", "-c", "echo hello >> test2.html"]
EXPOSE 80
CMD apachectl -DFOREGROUND
----------------------------------------------------------------------------------------------------

## - build dockerfile
$ sudo docker build -f Dockerfile_apache -t mybuild:0.0 .
$ sudo docker images
$ sudo docker run -d -P --name myserver mybuild:0.0
$ sudo docker ps -a
$ sudo docker port myserver

## - .dockerignore
$ vi .dockerignore
----------------------------------------------------------------------------------------------------
test2.html
*.html
*/*.html
test.htm?
!test*.html
----------------------------------------------------------------------------------------------------

## - cache options
$ sudo docker build -f Dockerfile_apache --no-cache -t mybuild:0.0 .
$ sudo docker build -f Dockerfile_apache --cache-from ubuntu:14.04 -t my_extend_ubuntu:14.04 .

## - ENV, VOLUME, ARG, USER
$ vi Dockerfile_env
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
ENV TEST /home
WORKDIR ${TEST}
RUN touch ${TEST}/mytouchfile
---------------------------------------------------------------------------------------------------- 
$ sudo docker build -f Dockerfile_env -t myenv:0.0 .
$ sudo docker run -it --name env_test myenv:0.0 /bin/bash
# echo $TEST
/home
# ls
mytouchfile
$ sudo docker run -it --name env_test_override -e TEST=myvalue myenv:0.0 /bin/bash
# echo $TEST
myvalue

$ vi Dockerfile_env2
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
ENV MY_ENV my_value
RUN echo [ ${MY_ENV:-value} / ${MY_ENV:+value} / ${MY_ENV2:-value} / ${MY_ENV2:+value} ]
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_env2 -t myenv:0.1 .
...
[ my_value / value / value / ]
...

$ vi Dockerfile_volume
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
RUN mkdir /home/volume
RUN echo test >> /home/volume/testfile
VOLUME /home/volume
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_volume -t myvolume:0.0 .
$ sudo docker run -itd --name volume_test myvolume:0.0
$ sudo docker volume ls

$ vi Dockerfile_arg
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
ARG MY_ARG
ARG MY_ARG2=value2
RUN touch ${MY_ARG}/mytouch
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_arg --build-arg MY_ARG=/home -t myarg:0.0 .
$ sudo docker run -it --name arg_test myarg:0.0
# ls /home/mytouch
/home/mytouch

$ vi Dockerfile_user
----------------------------------------------------------------------------------------------------
...
RUN groupadd -r author && useradd -r -g author hansung
USER hansung
...
----------------------------------------------------------------------------------------------------

## - ONBUILD, STOPSIGNAL, HEALTHCHECK, SHELL
$ vi Dockerfile_onbuild
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
RUN echo "This is onbuild test!"
ONBUILD RUN echo "onbuild!" >> /onbuild_file
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_onbuild -t onbuild_test:0.0 .
$ sudo docker run -it --rm onbuild_test:0.0 ls /

$ vi Dockerfile_onbuild2
----------------------------------------------------------------------------------------------------
FROM onbuild_test:0.0
RUN echo "This is child image!"
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_onbuild2 -t onbuild_test:0.1 .
$ sudo docker run -it --rm onbuild_test:0.1 ls /

$ vi Dockerfile_maven
----------------------------------------------------------------------------------------------------
FROM maven:3-jdk-8-alpine
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app
ONBUILD ADD . /usr/src/app
ONBUILD RUN mvn install
----------------------------------------------------------------------------------------------------

$ vi Dockerfile_stopsignal
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
STOPSIGNAL SIGKILL
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_stopsignal -t stopsignal:0.0 .
$ sudo docker run -itd --name stopsignal_container stopsignal:0.0
$ sudo docker inspect stopsignal_container | grep StopSignal

$ vi Dockerfile_healthcheck
----------------------------------------------------------------------------------------------------
FROM nginx
RUN apt-get update -y && apt-get install curl -y
HEALTHCHECK --interval=1m --timeout=3s --retries=3 CMD curl -f http://localhost || exit 1
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_healthcheck -t nginx:healthcheck .
$ sudo docker run -d -P --name healthcheck_test nginx:healthcheck
$ sudo docker ps -a
$ sudo docker inspect healthcheck_test | grep -A10 Health

$ vi Dockerfile_shell
----------------------------------------------------------------------------------------------------
...
RUN echo "hello, world!" # linux: /bin/sh -c echo "hello, world!", windows: cmd /S /C echo "hello, world!"
...
----------------------------------------------------------------------------------------------------

$ vi Dockerfile_shell2
----------------------------------------------------------------------------------------------------
FROM node
RUN echo hello, node!
SHELL ["/usr/local/bin/node"]
RUN -v
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_shell2 -t nodetest .

## - COPY, ADD
$ vi Dockerfile_copy_add
----------------------------------------------------------------------------------------------------
...
COPY test.html /home
COPY ["test.html", "test2.html", "/home"]
ADD test.html /home
ADD ["test.html", "test2.html", "/home"]
ADD https://raw.githubusercontent.com/alicek106/mydockerrepo/master/test.html /home
ADD test.tar /home
...
----------------------------------------------------------------------------------------------------

## - ENTRYPOINT, CMD
$ sudo docker run -it --name no_entrypoint ubuntu:14.04 /bin/bash
$ sudo docker run -it --name yes_entrypoint --entrypoint "echo" ubuntu:14.04 /bin/bash
$ sudo docker run -it --name entrypoint_sh --entrypoint "/test.sh" ubuntu:14.04 /bin/bash

$ vi entrypoint.sh
----------------------------------------------------------------------------------------------------
echo $1 $2
apachectl -DFOREGROUND
----------------------------------------------------------------------------------------------------
$ vi Dockerfile_entrypoint
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
RUN apt-get update
RUN apt-get install apache2 -y
ADD entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_entrypoint -t entrypoint_image:0.0 .
$ sudo docker run -d --name entrypoint_apache_server entrypoint_image:0.0 first second
$ sudo docker logs entrypoint_apache_server

## - difference between general format and json array format
$ vi Dockerfile_general
----------------------------------------------------------------------------------------------------
...
CMD echo test # /bin/sh -c echo test
ENTRYPOINT /entrypoint.sh # /bin/sh -c /entrypoint.sh
# -> /bin/sh -c /entrypoint.sh /bin/sh -c echo test
...
----------------------------------------------------------------------------------------------------

$ vi Dockerfile_jsonarray
----------------------------------------------------------------------------------------------------
...
CMD ["echo", "test"] # echo test
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"] # /bin/bash /entrypoint.sh
# -> /bin/bash /entrypoint.sh echo test
...
----------------------------------------------------------------------------------------------------

## - precautions for dockerfile
$ vi Dockerfile_ok
----------------------------------------------------------------------------------------------------
...
RUN apt-get install package-1 \
package-2 \
package-3
...
----------------------------------------------------------------------------------------------------

$ vi Dockerfile_ng
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
RUN mkdir /test
RUN fallocate -l 100m /test/dummy
RUN rm /test/dummy
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_ng -t falloc_100mb:0.0 .
$ sudo docker images

$ vi Dockerfile_ok
----------------------------------------------------------------------------------------------------
FROM ubuntu:14.04
RUN mkdir /test && \
fallocate -l 100m /test/dummy && \
rm /test/dummy
----------------------------------------------------------------------------------------------------
$ sudo docker build -f Dockerfile_ok -t falloc_100mb:0.1 .
$ sudo docker images

$ sudo docker run -itd --name temp falloc_100mb:0.0
$ sudo docker export temp | sudo docker import - falloc_100mb:0.2
$ sudo docker run -itd --name temp2 falloc_100mb:0.2
docker: Error response from daemon: No command specified.

## docker daemon
## - run docker daemon 
$ sudo service docker stop
$ sudo service docker start
$ sudo dockerd
$ sudo docker daemon

## - set docker daemon options
$ sudo dockerd --help
$ sudo dockerd -H tcp://0.0.0.0:2375 --insecure_registry 192.168.0.15:5000 --tls false
$ sudo vi /etc/default/docker
----------------------------------------------------------------------------------------------------
...
DOCKER_OPTS="dockerd -H tcp://0.0.0.0:2375 --insecure_registry 192.168.0.15:5000 --tls false"
----------------------------------------------------------------------------------------------------

## - docker daemon control: -H
$ sudo dockerd -H unix:///var/run/docker.sock # same as sudo dockerd
$ sudo dockerd -H tcp://0.0.0.0:2375
$ sudo dockerd -H unix:///var/run/docker.sock -H tcp://0.0.0.0:2375
$ curl 192.168.0.15:2375/version

$ export DOCKER_HOST="tcp://192.168.0.15:2375"
$ sudo docker version
$ sudo docker -H tcp://192.168.0.15:2375 version

## - docker daemon control: --tlsverify
$ mkdir certs && cd certs
$ openssl genrsa -aes256 -out ca-key.pem 4096
Enter pass phrase for ca-key.pem:test1234
Verifying - Enter pass phrase for ca-key.pem:test1234
$ openssl req -new -x509 -days 10000 -key ca-key.pem -sha256 -out ca.pem
Enter pass phrase for ca-key.pem:test1234
Country Name (2 letter code) [AU]:
State or Province Name (full name) [Some-State]:
Locality Name (eg, city) []:
Organization Name (eg, company) [Internet Widgits Pty Ltd]:
Organizational Unit Name (eg, section) []:
Common Name (e.g. server FQDN or YOUR name) []:
Email Address []:
$ openssl genrsa -out server-key.pem 4096
$ openssl req -subj "/CN=192.168.0.15" -sha256 -new -key server-key.pem -out server.csr
$ echo subjectAltName = IP:192.168.0.15,IP:127.0.0.1 > extfile.cnf
$ openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf
Enter pass phrase for ca-key.pem:test1234

$ openssl genrsa -out key.pem 4096
$ openssl req -subj "/CN=192.168.0.15" -new -key key.pem -out client.csr
$ echo extendedKeyUsage = clientAuth > extfile.cnf
$ openssl x509 -req -days 30000 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile.cnf
Enter pass phrase for ca-key.pem:test1234
$ ls
ca-key.pem ca.pem cert.pem key.pem server-cert.pem server-key.pem
$ chmod -v 0400 ca-key.pem ca.pem cert.pem key.pem server-cert.pem server-key.pem
$ sudo mkdir ~/.docker/certs
$ sudo cp {ca,server-key,server-cert,key,cert}.pem ~/.docker/certs

$ sudo service docker stop
$ sudo dockerd --tlsverify --tlscacert ~/.docker/certs/ca.pem --tlscert ~/.docker/certs/server-cert.pem --tlskey ~/.docker/certs/server-key.pem -H 0.0.0.0:2376 -H unix:///var/run/docker.sock
$ sudo docker -H 192.168.0.15:2376 version
Get http://192.168.0.15:2376/v1.39/version: net/http: HTTP/1.x transport connection broken: malformed HTTP response "\x15\x03\x01\x00\x02\x02".
* Are you trying to connect to a TLS-enabled daemon without TLS?
$ sudo docker -H 192.168.0.15:2376 --tlsverify --tlscacert ~/.docker/certs/ca.pem --tlscert ~/.docker/certs/cert.pem --tlskey ~/.docker/certs/key.pem version
$ export DOCKER_CERT_PATH="~/.docker/certs"
$ export DOCKER_TLS_VERIFY=1
$ sudo docker -H 192.168.0.15:2376 version
$ sudo curl https://192.168.0.15:2376/version --cacert ~/.docker/certs/ca.pem --cert ~/.docker/certs/cert.pem --key ~/.docker/certs/key.pem
$ Ctrl + C # kill dockerd
$ sudo service docker start

## - docker daemon control: --storage-driver
$ sudo docker info | grep "Storage Driver"
Storage Driver: overlay2
$ sudo dockerd --storage-driver devicemapper

## - docker daemon monitoring: debug mode
$ sudo dockerd -D

## - docker daemon monitoring: events

### docker compose install ###
https://docs.docker.com/compose/install/
$ sudo curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
$ docker-compose --version
docker-compose version 1.25.0, build 0a186604

