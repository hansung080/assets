###### docker tutorial ######

### docker engine install ###
## requirements
1. Kernel version need to be equal or higher than 3.10.
2. Linux distribution need to be supportable.
3. Linux need to be 64-bit.
4. Installation requires root permission.

$ uname -a
Linux ubuntu64 4.15.0-48-generic #51-Ubuntu SMP Wed Apr 3 08:28:49 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

$ uname -r
4.15.0-48-generic

$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
$ sudo apt-get update
$ sudo apt-get install docker-ce

$ docker -v
Docker version 18.09.5, build e8ff056

$ sudo docker info

### docker engine commands ###
## create container
$ sudo docker run -it ubuntu:14.04
# exit OR Ctrl + D # exit with stopping container.
# Ctrl + P + Q # exit without stopping container.
$ sudo docker pull centos:7
$ sudo docker create -it --name mycentos centos:7
$ sudo docker start mycentos
$ sudo docker attach mycentos
$ sudo docker images

## difference between run and create
## - run: pull + create + start + attach # pull if the image does not exist and attach if -it options are used.
## - create: pull + create # pull if the image does not exist.

## list container
$ sudo docker ps
$ sudo docker ps -a
$ sudo docker inspect mycentos | grep Id
$ sudo docker container inspect mycentos | grep Id
$ sudo docker run -it ubuntu:14.04 echo hello world! # override the image-embedded command with the CLI command.
$ sudo docker rename angry_morse my_container
$ sudo docker ps -a --format "table {{.ID}}\t{{.Status}}\t{{.Image}}\t{{.Names}}"

## remove container
$ sudo docker stop mycentos
$ sudo docker rm mycentos
$ sudo docker rm -f mycentos
$ sudo docker container prune # This will remove all stopped containers.
$ sudo docker stop `sudo docker ps -aq`
$ sudo docker rm $(sudo docker ps -a -q)

## expose container
$ sudo docker run -it --name mywebserver -p 80:80 ubuntu:14.04 
# apt-get update
# apt-get install apache2 -y
# service apache2 start
$ sudo docker run -it -p 3306:3306 -p 192.168.0.15:7777:80 ubuntu:14.04

## construct container application
$ sudo docker run -it --name ubuntu_attach_test ubuntu:14.04
# Ctrl + P + Q # exit without stopping container.
$ sudo docker attach ubuntu_attach_test

$ sudo docker run -d --name wordpressdb -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress mysql:5.7
$ sudo docker exec -it wordpressdb /bin/bash
# echo $MYSQL_ROOT_PASSWORD
# mysql -u root -p
# exit # exit without stopping container if docker exec has been used. only exit /bin/bash.
$ sudo docker exec wordpressdb ls /

$ sudo docker run -d --name wordpress -e WORDPRESS_DB_PASSWORD=password --link wordpressdb:mysql -p 80 wordpress
$ sudo docker port wordpress
$ sudo docker exec wordpress ping -c 2 mysql

## docker volume
## - host volume sharing
$ sudo docker run -d --name wordpressdb_hostvolume -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -v /home/hansung/work/docker/volumes/wordpress_db:/var/lib/mysql mysql:5.7
$ sudo docker run -d --name wordpress_hostvolume -e WORDPRESS_DB_PASSWORD=password --link wordpressdb_hostvolume:mysql -p 80 wordpress
$ ls -alF /home/hansung/work/docker/volumes/wordpress_db
$ sudo docker stop wordpress_hostvolume wordpressdb_hostvolume
$ sudo docker rm wordpress_hostvolume wordpressdb_hostvolume
$ ls -alF /home/hansung/work/docker/volumes/wordpress_db

$ sudo docker run -it --name volume_dummy alicek106/volume_test
# ls -alF /home/testdir_2
$ sudo docker run -it --name volume_override -v /home/hansung/work/docker/volumes/wordpress_db:/home/testdir_2 alicek106/volume_test
# ls -alF /home/testdir_2

## - volume container
$ sudo docker run -it --name volumes_from_container --volumes-from volume_override ubuntu:14.04
# ls -alF /home/testdir_2

## - docker volume
$ sudo docker volume create --name myvolume
$ sudo docker volume ls
$ sudo docker run -it --name myvolume_1 -v myvolume:/root ubuntu:14.04
# echo hello, volume! >> /root/volume
$ sudo docker run -it --name myvolume_2 -v myvolume:/root ubuntu:14.04
# cat /root/volume
hello, volume!
$ sudo docker inspect myvolume
$ sudo docker inspect --type volume myvolume
$ sudo docker volume inspect myvolume
$ sudo cat /var/lib/docker/volumes/myvolume/_data/volume
hello, volume!
$ sudo docker run -it --name volume_auto -v /root ubuntu:14.04
$ sudo docker volume ls
$ sudo docker container inspect volume_auto | grep Source
$ sudo docker volume prune

## docker network
$ sudo apt-get install bridge-utils
$ brctl show docker0
$ sudo docker network ls
$ sudo docker network inspect bridge

## - bridge network
$ sudo docker network create --driver bridge mybridge
$ sudo docker run -it --name mynetwork_container --net mybridge ubuntu:14.04
$ sudo docker network create --driver bridge --subnet=172.72.0.0/16 --ip-range=172.72.0.0/24 --gateway=172.72.0.1 my_custom_network

## - host network
$ sudo docker run -it --name network_host --net host ubuntu:14.04

## - none network
$ sudo docker run -it --name network_none --net none ubuntu:14.04

## - container network
$ sudo docker run -itd --name network_container_1 ubuntu:14.04
$ sudo docker run -itd --name network_container_2 --net container:network_container_1 ubuntu:14.04
$ sudo docker exec network_container_1 ifconfig
$ sudo docker exec network_container_2 ifconfig

## - bridge network and --net-alias
$ sudo docker run -itd --name network_alias_container1 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker run -itd --name network_alias_container2 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker run -itd --name network_alias_container3 --net mybridge --net-alias alicek106 ubuntu:14.04
$ sudo docker inspect network_alias_container1 | grep IPAddress
$ sudo docker inspect network_alias_container2 | grep IPAddress
$ sudo docker inspect network_alias_container3 | grep IPAddress
$ sudo docker run -it --name network_alias_ping --net mybridge ubuntu:14.04
# ping -c 1 alicek106
# ping -c 1 alicek106
# ping -c 1 alicek106
# apt-get update
# apt-get install dnsutils
# dig alicek106

## container logging
## - json-file logging
$ sudo docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=1234 mysql:5.7
$ sudo docker logs mysql
$ sudo docker run -d --name no_passwd_mysql mysql:5.7
$ sudo docker ps -a --format "table {{.ID}}\t{{.Status}}\t{{.Ports}}\t{{.Names}}"
$ sudo docker logs no_passwd_mysql
$ sudo docker logs --tail 2 mysql
$ sudo docker logs --since 1474765979 mysql
$ sudo docker logs -f -t mysql
$ sudo docker run -it --name logstest ubuntu:14.04
# echo test!
$ sudo docker logs logstest
$ sudo cat /var/lib/docker/containers/${CONTAINER_ID}/${CONTAINER_ID}-json.log

## - syslog logging
$ sudo docker run -d --name syslog_container --log-driver=syslog ubuntu:14.04 echo syslogtest
$ tail /var/log/syslog # for ubuntu 14.04
$ journalctl -u docker.service # for ubuntu 16.04

$ sudo docker run -it --name rsyslog_server -h rsyslog -p 514:514 -p 514:514/udp ubuntu:14.04
# vi /etc/rsyslog.conf
--------------------------------------------------
# provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 514

# provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 514
--------------------------------------------------
# service rsyslog restart
$ sudo docker run -it --name rsyslog_client --log-driver=syslog --log-opt syslog-address=tcp://192.168.0.15:514 --log-opt tag="mylog" ubuntu:14.04
# echo test
$ sudo docker attach rsyslog_server
# tail /var/log/syslog

$ sudo docker run -it --name rsyslog_client_facility --log-driver=syslog --log-opt syslog-address=tcp://192.168.0.15:514 --log-opt tag="maillog" --log-opt syslog-facility="mail" ubuntu:14.04
# echo facility test
$ sudo docker attach rsyslog_server
# tail /var/log/mail.log

## - fluentd logging
